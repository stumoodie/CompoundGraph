<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project basedir="." default="buildAll" name="CompoundGraph">
	<property environment="env" />
	<property name="junit.output.dir" value="junit" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.6" />
	<property name="source" value="1.6" />
	<property name="build.dir" value="./ant-build" />
	<property name="build.dir.src" value="${build.dir}/src"/>
	<property name="build.dir.tests" value="${build.dir}/test"/>
	<property name="docs.build.dir" value="./doc"/>
	<property name="src.dir" value="./src" />
	<property name="test.dir" value="./test" />
	<property name="integrationTest.dir" value="./integrationTest" />
	<property name="libs.dir" value="./lib" />
	<property name="jar.dir" value="./jars" />
	<property name="jar.name.bin" value="CompoundGraph.jar" />
	<property name="jar.name.src" value="CompoundGraph-src.jar" />
	<property name="jar.name.doc" value="CompoundGraph-docs.jar" />


	<path id="CompoundGraph.classpath">
		<pathelement location="${libs.dir}/junit-4.8.2/junit-4.8.2.jar" />
		<pathelement location="${libs.dir}/apache-log4j-1.2.15/log4j-1.2.15.jar" />
		<pathelement location="${libs.dir}/jmock-2.5.1/jmock-2.5.1.jar" />
		<pathelement location="${libs.dir}/jmock-2.5.1/jmock-junit4-2.5.1.jar" />
		<pathelement location="${libs.dir}/jmock-2.5.1/jmock-legacy-2.5.1.jar" />
		<pathelement location="${libs.dir}/jmock-2.5.1/hamcrest-core-1.1.jar" />
		<pathelement location="${libs.dir}/jmock-2.5.1/hamcrest-library-1.1.jar" />
		<pathelement location="${libs.dir}/jmock-2.5.1/objenesis-1.0.jar" />
		<pathelement location="${libs.dir}/jmock-2.5.1/cglib-nodep-2.1_3.jar" />
		<pathelement location="${libs.dir}/aspectj-1.6.9/aspectjrt.jar" />
	</path>

	<path id="test.classpath">
		<path refid="CompoundGraph.classpath" />
		<pathelement location="${build.dir.src}" />
		<pathelement location="${build.dir.tests}" />
	</path>


	<target name="buildAll" depends="cleanall,build-project,api-docs,jarAll" />

	<target name="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir.src}" />
		<mkdir dir="${build.dir.tests}" />
		<!-- copy includeemptydirs="false" todir="${build.dir}">
			<fileset dir="src" excludes="**/*.launch, **/*.java, **/*.ajc" />
		</copy>
		<copy includeemptydirs="false" todir="${build.dir}">
			<fileset dir="test" excludes="**/*.launch, **/*.java, **/*.ajc" />
		</copy-->
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target depends="clean" name="cleanall" />

	<target depends="build-project" name="build" />

	<target depends="init,build-src,build-test, build-integration-test" name="build-project" />

	  <taskdef
	      resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
	    <classpath>
	      <pathelement location="${lib.dir}/aspectj-1.6.9/aspectjtools.jar"/>
	    </classpath>
	  </taskdef>

	<target depends="init" name="build-src">
		<echo message="${ant.project.name}: ${ant.file}" />
		<iajc debug="true" debuglevel="${debuglevel}" destdir="${build.dir.src}" source="${source}"
			nowarn="false" target="${target}" verbose="true">
			<src path="${src.dir}" />
			<classpath refid="CompoundGraph.classpath" />
			<!--compilerarg value="-Xlint" /-->
		</iajc>
		<copy todir="${build.dir}">
			<fileset dir="${build.dir}" />
		</copy>
	</target>

	<target depends="init,build-src" name="build-test">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="${build.dir.tests}" source="${source}" nowarn="false" target="${target}">
			<src path="${test.dir}" />
			<classpath refid="test.classpath" />
			<compilerarg value="-Xlint" />
		</javac>
	</target>
	
	<target depends="init,build-src" name="build-integration-test">
			<echo message="${ant.project.name}: ${ant.file}" />
			<javac debug="true" debuglevel="${debuglevel}" destdir="${build.dir.tests}" source="${source}" nowarn="false" target="${target}">
				<src path="${integrationTest.dir}" />
				<classpath refid="test.classpath" />
				<compilerarg value="-Xlint" />
			</javac>
		</target>

	<target name="jar-bin" depends="build-src,init-jardirs">
		<jar destfile="${jar.dir}/${jar.name.bin}" basedir="${build.dir.src}">
		</jar>
	</target>

	<target name="jar-and-export" depends="jarAll">
		<copy todir="${businessobjects.dir}">
			<fileset dir="${jar.dir}" />
		</copy>
	</target>


	<target name="api-docs">
		<javadoc access="package" author="true" splitindex="true" use="true" version="true" source="1.5" sourcepath="src" destdir="doc" doctitle="Compund Graph API" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false">
			<classpath refid="CompoundGraph.classpath" />
		</javadoc>
	</target>

	<target name="tests" depends="build-test,build-integration-test">
		<delete dir="${build.dir.tests}/logs" />
		<mkdir dir="${build.dir.tests}/logs" />
		<!-- <echo>running with classpath ${toString:test.classpath}</echo>-->
		<!--run test cases. All test class names  should end in 'Test' to avoid
				inclusion of inner classes. -->
		<junit printsummary="yes" haltonfailure="no" fork="true" maxmemory="512m">
			<classpath>
				<path refid="test.classpath" />
			</classpath>
			<batchtest todir="${build.dir.tests}/logs">
				<formatter type="xml" />
				<fileset dir="${build.dir.tests}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>

		<!-- clean report directory -->
		<delete dir="${build.dir.tests}/junitReports" />
		<mkdir dir="${build.dir.tests}/junitReports" />

		<!-- generate report -->
		<junitreport todir="${build.dir.tests}/junitReports">
			<fileset dir="${build.dir.tests}/logs" includes="**/*.xml" />
			<report todir="${build.dir.tests}/junitReports" />
		</junitreport>
	</target>

	<target name="jarAll" depends="jar-bin, jar-src, jar-docs"/>
	
	<target name="jar-docs" depends="api-docs">
		<mkdir dir="${jar.dir}" />
		<jar destfile="${jar.dir}/${jar.name.doc}">
			<fileset dir="${docs.build.dir}" />
		</jar>
	</target>
				
	<target name="init-jardirs">
		<delete dir="${jar.dir}" />
		<mkdir dir="${jar.dir}" />
	</target>

	<target name="jar-src" depends="init-jardirs">
		<jar destfile="${jar.dir}/${jar.name.src}">
			<fileset dir="${src.dir}" />
		</jar>
	</target>

</project>
